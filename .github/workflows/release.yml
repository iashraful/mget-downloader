name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: deb
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          BIN="rwget"
          OUT="rwget-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p dist
          cp target/${{ matrix.target }}/release/$BIN dist/
          tar -czvf $OUT.tar.gz -C dist $BIN
          rm -rf dist
          echo "ASSET=$OUT.tar.gz" >> $GITHUB_ENV

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $BIN="rwget.exe"
          $OUT="rwget-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir dist
          cp target/${{ matrix.target }}/release/$BIN dist/
          Compress-Archive -Path dist/* -DestinationPath "$OUT.zip"
          echo "ASSET=$OUT.zip" >> $env:GITHUB_ENV

      - name: Create .deb (Linux only)
        if: matrix.archive == 'deb'
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          mkdir -p pkg/DEBIAN pkg/usr/bin
          cp target/${{ matrix.target }}/release/rwget pkg/usr/bin/
          cat <<EOF > pkg/DEBIAN/control
          Package: rwget
          Version: $VERSION
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Your Name <you@example.com>
          Description: Parallel wget-like downloader in Rust
          EOF
          dpkg-deb --build pkg rwget_${VERSION}_amd64.deb
          echo "ASSET=rwget_${VERSION}_amd64.deb" >> $GITHUB_ENV

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
